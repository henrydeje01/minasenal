import os
os.environ["PORT"] = "10000"

import logging
import random
import asyncio
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask
import threading

# === Configurar Flask para mantener activo el Web Service de Render ===
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Bot de se√±ales Mine Cave est√° activo!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)

# Configuraci√≥n del bot
TOKEN = "7335845771:AAFQLQPtF83J_H4T608W0FcseIUrzub7FpI"
CHAT_ID ="-1002342267741" # Aseg√∫rate de que este sea un n√∫mero entero

# Inicializa el bot y el despachador
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Configurar logging
logging.basicConfig(level=logging.INFO)

# Par√°metros del juego
FILAS, COLUMNAS = 5, 5
ESTRELLAS = 4

# Lista para almacenar los patrones utilizados
patrones_utilizados = []

# Funci√≥n para generar se√±ales seguras de Las Minas
def generar_senal():
    filas, columnas = FILAS, COLUMNAS
    estrellas = ESTRELLAS
    tablero = [["‚¨ú" for _ in range(columnas)] for _ in range(filas)]

    while True:
        posiciones_estrellas = set()
        while len(posiciones_estrellas) < estrellas:
            x, y = random.randint(0, filas - 1), random.randint(0, columnas - 1)
            posiciones_estrellas.add((x, y))
        
        # Convertir posiciones a una tupla para verificar si ya se ha utilizado
        patron = tuple(sorted(posiciones_estrellas))
        if patron not in patrones_utilizados:
            patrones_utilizados.append(patron)
            break

    for (x, y) in posiciones_estrellas:
        tablero[x][y] = "‚≠ê"

    # Representando los cuadros con color azul celeste utilizando el emoji üü¶
    tablero_con_cuadros = "\n".join(" ".join(fila) for fila in tablero)
    tablero_con_cuadros = tablero_con_cuadros.replace("‚¨ú", "üü¶")
    return tablero_con_cuadros

# Manejador para el comando /start
@dp.message(CommandStart())
async def start(message: types.Message):
    boton_iniciar = KeyboardButton(text="Iniciar se√±ales")
    teclado = ReplyKeyboardMarkup(keyboard=[[boton_iniciar]], resize_keyboard=True)
    await message.answer("üöÄ Bot activo! Pulsa 'Iniciar se√±ales' para comenzar a recibir se√±ales de Las Minas cada 3 minutos.", reply_markup=teclado)

# Manejador para el bot√≥n "Iniciar se√±ales"
@dp.message(lambda message: message.text == "Iniciar se√±ales")
async def iniciar_senales(message: types.Message):
    await message.answer("üîî Has iniciado las se√±ales. Recibir√°s una nueva se√±al cada 3 minutos.")
    asyncio.create_task(enviar_senales())

# Funci√≥n para enviar se√±ales cada 3 minutos
async def enviar_senales():
    while True:
        await bot.send_message(CHAT_ID, "checking signals..üìà‚Äã")
        await asyncio.sleep(10)  # Esperar 10 segundos antes de enviar la se√±al
        senal = generar_senal()
        mensaje = (
            "‚ö†Ô∏è WARNING: Play responsibly! Although this bot has a 95% success rate, "
            "you should always play responsibly. ‚ö†Ô∏è\n\n"
            f"üî• PREDICTION CONFIRMED! üöÄ\n\n{senal}\nTRAPS: 3\nATTEMPTS: 3"
        )
        await bot.send_message(CHAT_ID, mensaje)
        await bot.send_message(CHAT_ID, "‚ö†Ô∏è REMINDER: You have 3 minutes to execute this signal and only 3 attempts! ‚ö†Ô∏è")
        await asyncio.sleep(120)  # Esperar 2 minutos
        await bot.send_message(CHAT_ID, "‚úÖ‚úÖ‚úÖ PREDICTION SUCCESSFUL! üéâüéâüéâ\n\nGreat job! Keep playing responsibly and enjoy your winnings! ü§ëüí∞")
        await asyncio.sleep(50)  # Esperar el tiempo restante para completar los 3 minutos (180 segundos)

# Funci√≥n principal para iniciar el bot
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()  # Inicia el servidor Flask
    asyncio.run(main())  # Inicia el bot



    
